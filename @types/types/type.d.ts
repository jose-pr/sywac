import { Context, SlurpedArg } from "../context";
import { CoerceFunction, TypeOptions, IType, TypeResult, TypeObject } from "./api";
export declare class Type<V = any, O extends TypeOptions<V> = TypeOptions<V>> implements IType<V, O> {
    protected _aliases: string[];
    protected _defaultVal?: V;
    protected _required?: boolean;
    protected _strict?: boolean;
    protected _coerceHandler?: CoerceFunction<V>;
    protected _flags?: string;
    protected _desc?: string;
    protected _hints?: string | string[];
    protected _group?: string;
    protected _hidden?: boolean;
    protected _parent?: string;
    constructor(opts: O);
    configure(opts?: Partial<O>, override?: boolean): this;
    get id(): string;
    withParent(apiName: string): this;
    get parent(): string;
    get datatype(): string;
    get shouldValidateDefaultValue(): boolean;
    alias(a: string): this;
    get aliases(): string[];
    defaultValue(dv: V): this;
    get defaultVal(): V | undefined;
    required(r: boolean): this;
    get isRequired(): boolean;
    strict(s: boolean): this;
    get isStrict(): boolean;
    coerce(syncFunction: CoerceFunction<V>): this;
    get coerceHandler(): CoerceFunction<V>;
    flags(f: string): this;
    get helpFlags(): string | undefined;
    description(d?: string): this;
    desc(d?: string): this;
    get helpDesc(): string;
    hints(h?: string | string[]): this;
    get helpHints(): string | string[];
    buildHelpHints(hintsArray: string[]): void;
    group(g: string): this;
    get helpGroup(): string;
    hidden(h: boolean): this;
    get isHidden(): boolean;
    validateConfig(utils: any): void;
    resolve(): Promise<this>;
    parse(context: Context, validate?: boolean): Promise<this>;
    private _internalParse;
    validateParsed(context: Context): Promise<this>;
    failValidation(context: Context, msg: string[]): void;
    hasRequiredValue(context: Context): boolean;
    buildRequiredMessage(context: Context, msgAndArgs: {
        msg: string;
        args: string[];
    }): void;
    buildInvalidMessage(context: Context, msgAndArgs: {
        msg: string;
        args: (V | string)[];
    }): void;
    postParse(context: Context): Promise<this>;
    applySource(context: Context, source?: string | null, position?: number, raw?: string): void;
    isApplicable(context: Context, currentValue: unknown, previousValue: unknown, slurpedArg: SlurpedArg): boolean;
    observeAlias(context: Context, alias: string): void;
    setValue(context: Context, value: V): void;
    getValue(context: Context): V;
    validateValue(value: unknown, context: Context): Promise<boolean> | boolean;
    toObject(): TypeObject;
    toResult(context: Context, shouldCoerce?: boolean): TypeResult;
}
export default Type;
